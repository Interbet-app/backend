openapi: "3.0.0"
info:
   title: InterBet
   version: "1.0.0"

servers:
   - url: https://interbet-api.herokuapp.com
   - url: localhost:4000

components:
   securitySchemes:
      bearerAuth:
         name: authentication
         in: header
         type: "apiKey"

   schemas:
      user:
         type: object
         properties:
            id:
               type: integer
               format: int64
            name:
               type: string
            email:
               type: string
            level:
               type: integer
               format: int64
            externalId:
               type: string
            affiliateId:
               type: integer
               format: int64
            teamId:
               type: integer
               format: int64
            picture:
               type: string
            oauth:
               type: string
               enum: ["facebook", "google", "instagram"]
            createdAt:
               type: string
               format: date-time
            updatedAt:
               type: string
               format: date-time
      team:
         type: object
         properties:
            id:
               type: integer
               format: int64
            name:
               type: string
            athleticId:
               type: integer
            abbreviation:
               type: string
            location:
               type: string
            picture:
               type: string
            createdAt:
               type: string
               format: date-time
            updatedAt:
               type: string
               format: date-time
      athletic:
         type: object
         properties:
            id:
               type: integer
               format: int64
            name:
               type: string
            abbreviation:
               type: string
            picture:
               type: string
            createdAt:
               type: string
               format: date-time
            updatedAt:
               type: string
               format: date-time
      event:
         type: object
         properties:
            id:
               type: integer
               format: int64
            name:
               type: string
            description:
               type: string
            title:
               type: string
            location:
               type: string
            createdAt:
               type: string
               format: date-time
            updatedAt:
               type: string
               format: date-time
      notification:
         type: object
         properties:
            id:
               type: integer
               format: int64
            userId:
               type: integer
               format: int64
            title:
               type: string
            message:
               type: string
            unread:
               type: boolean
            createdAt:
               type: string
               format: date-time
            updatedAt:
               type: string
               format: date-time
      wallet:
         type: object
         properties:
            id:
               type: integer
               format: int64
            userId:
               type: integer
               format: int64
            balance:
               type: number
            blocked:
               type: number
            score:
               type: integer
            createdAt:
               type: string
               format: date-time
            updatedAt:
               type: string
               format: date-time
      maintenance:
         type: object
         properties:
            id:
               type: integer
               format: int64
            userId:
               type: integer
               format: int64
            path:
               type: string
            method:
               type: string
               enum: ["GET", "POST", "PUT", "DELETE", "PATCH", "ALL"]
            group:
               type: string
            createdAt:
               type: string
               format: date-time
            updatedAt:
               type: string
               format: date-time
      add:
         type: object
         properties:
            id:
               type: integer
               format: int64
            image:
               type: string
            url:
               type: string
            createdAt:
               type: string
               format: date-time
            updatedAt:
               type: string
               format: date-time
      game:
         type: object
         properties:
            id:
               type: integer
               format: int64
            name:
               type: string
            eventId:
               type: integer
               format: int64
            winnerOddId:
               type: integer
               format: int64
            status:
               type: string
               enum: ["pending", "ongoing", "finished"]
            modality:
               type: string
            location:
               type: string
            result:
               type: string
            startDate:
               type: string
               format: date-time
            createdAt:
               type: string
               format: date-time
            updatedAt:
               type: string
               format: date-time
      odd:
         type: object
         properties:
            id:
               type: integer
               format: int64
            name:
               type: string
            teamId:
               type: integer
               format: int64
            gameId:
               type: integer
               format: int64
            payout:
               type: number
            amount:
               type: number
            maxBetAmount:
               type: number
            payment:
               type: number
            bets:
               type: integer
            score:
               type: integer
            offer:
               type: boolean
            status:
               type: string
               enum: ["lock", "open"]
            createdAt:
               type: string
               format: date-time
            updatedAt:
               type: string
               format: date-time
      bet:
         type: object
         properties:
            id:
               type: integer
               format: int64
            userId:
               type: integer
               format: int64
            oddId:
               type: integer
               format: int64
            amount:
               type: number
            payout:
               type: number
            status:
               type: string
               enum: ["pending", "completed"]
            result:
               type: string
               enum: ["win", "lose", "pendent"]
            createdAt:
               type: string
               format: date-time
            updatedAt:
               type: string
               format: date-time
paths:
   /google/oauth:
      post:
         tags:
            - OAuth
         parameters:
            - name: google_authentication
              in: header
              required: true
              schema:
                 type: string
         requestBody:
            content:
               application/json:
                  schema:
                     type: object
                     properties:
                        affiliateId:
                           type: integer
                           format: int64
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/user"
            "500":
               description: Internal Server Error
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           message:
                              type: string
   /facebook/oauth:
      post:
         tags:
            - OAuth
         requestBody:
            content:
               application/json:
                  schema:
                     type: object
                     required:
                        - accessToken
                        - email
                        - name
                        - picture
                        - id
                     properties:
                        accessToken:
                           type: string
                        affiliateId:
                           type: integer
                           format: int64
                        email:
                           type: string
                        picture:
                           type: string
                        name:
                           type: string
                        id:
                           type: string
                           description: Facebook ID
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/user"
   /instagram/oauth:
      post:
         tags:
            - OAuth
         requestBody:
            content:
               application/json:
                  schema:
                     type: object
                     required:
                        - code
                     properties:
                        affiliateId:
                           type: string
                        code:
                           type: integer
                           format: int64
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/user"
   /logout:
      post:
         tags:
            - OAuth
         security:
            - bearerAuth: ["authentication"]
         responses:
            "200":
               description: Invalida o token de acesso do usuário
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           message:
                              type: string
   /user:
      get:
         tags:
            - Usuários
         security:
            - bearerAuth: ["authentication"]
         responses:
            "200":
               description: Return user details
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/user"
      put:
         tags:
            - Usuários
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     type: object
                     properties:
                        name:
                           type: string
                        teamId:
                           type: integer
                           format: int64
         responses:
            "200":
               description: OK
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/user"
   /wallet:
      get:
         tags:
            - Carteiras
         security:
            - bearerAuth: ["authentication"]
         responses:
            "200":
               description: Return wallet details
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/wallet"
      put:
         tags:
            - Carteiras
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     type: object
                     required:
                        - walletId
                        - updatedAt
                     properties:
                        balance:
                           type: number
                           format: double
                        blocked:
                           type: number
                           format: double
                        walletId:
                           type: integer
                           format: int64
                        updatedAt:
                           type: string
                           format: date-time
                        score:
                           type: number
                           format: int
         responses:
            "200":
               description: Return the updated wallet
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/wallet"
   /notifications:
      get:
         tags:
            - Notificações
         security:
            - bearerAuth: ["authentication"]
         responses:
            "200":
               description: Return all notifications
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           notifications:
                              type: array
                              items:
                                 $ref: "#/components/schemas/notification"
   /notifications/{id}/:
      put:
         tags:
            - Notificações
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: id
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
         responses:
            "200":
               description: Return all notifications
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/notification"
      delete:
         tags:
            - Notificações
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: id
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
         responses:
            "200":
               description: delete successful
            "422":
               description: Invalid ID
            "404":
               description: Not found
            "403":
               description: Unauthorized
   /teams:
      get:
         tags:
            - Times
         security:
            - bearerAuth: ["authentication"]
         responses:
            "200":
               description: Return teams
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           teams:
                              type: array
                              items:
                                 $ref: "#/components/schemas/team"
      post:
         tags:
            - Times
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               multipart/form-data:
                  schema:
                     type: object
                     properties:
                        name:
                           type: string
                        abbreviation:
                           type: string
                        location:
                           type: string
                        athleticId:
                           type: number
                        picture:
                           type: string
                           format: binary
                           description: File to upload
         responses:
            "200":
               description: Return teams
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/team"
      put:
         tags:
            - Times
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               multipart/form-data:
                  schema:
                     type: object
                     properties:
                        name:
                           type: string
                        abbreviation:
                           type: string
                        location:
                           type: string
                        teamId:
                           type: number
                        athleticId:
                           type: number
                        picture:
                           type: string
                           format: binary
                           description: File to upload
         responses:
            "200":
               description: Return updated team
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/team"
   /teams/{search}/:
      get:
         tags:
            - Times
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: name
              in: path
              required: true
              schema:
                 type: string
         responses:
            "200":
               description: Return all teams by like the name
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           teams:
                              type: array
                              items:
                                 $ref: "#/components/schemas/team"
   /teams/{id}/:
      delete:
         tags:
            - Times
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: id
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
         responses:
            "200":
               description: Return 200 if deleted successfully
   /athletics:
      get:
         tags:
            - Atléticas
         security:
            - bearerAuth: ["authentication"]
         responses:
            "200":
               description: Return all athletics
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           athletics:
                              type: array
                              items:
                                 $ref: "#/components/schemas/athletic"
      post:
         tags:
            - Atléticas
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               multipart/form-data:
                  schema:
                     type: object
                     properties:
                        picture:
                           type: string
                           format: binary
                           description: File to upload
                        name:
                           type: string
                           description: Name of the athletic
                        abbreviation:
                           type: string
                           description: Abbreviation of the athletic
         responses:
            "200":
               description: Return the created athletic
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/athletic"
      put:
         tags:
            - Atléticas
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               multipart/form-data:
                  schema:
                     type: object
                     properties:
                        picture:
                           type: string
                           format: binary
                           description: File to upload
                        name:
                           type: string
                           description: Name of the athletic
                        abbreviation:
                           type: string
                           description: Abbreviation of the athletic
         responses:
            "200":
               description: Return the updated athletic
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/athletic"
   /athletics/{search}/:
      get:
         tags:
            - Atléticas
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: name
              in: path
              required: true
              schema:
                 type: string
         responses:
            "200":
               description: Return all athletics by like the name
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           athletics:
                              type: array
                              items:
                                 $ref: "#/components/schemas/athletic"
   /athletics/{id}/:
      delete:
         tags:
            - Atléticas
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: id
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
         responses:
            "200":
               description: Return 200 if deleted successfully
   /maintenances/{group}/:
      get:
         tags:
            - Manutenção da administração
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: group
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
                 description: Group to filter maintenances
         responses:
            "200":
               description: Return all maintenances by group
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           maintenances:
                              type: array
                              items:
                                 $ref: "#/components/schemas/maintenance"
   /maintenances:
      get:
         tags:
            - Manutenção da administração
         security:
            - bearerAuth: ["authentication"]
         responses:
            "200":
               description: Return all maintenances
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           maintenances:
                              type: array
                              items:
                                 $ref: "#/components/schemas/maintenance"
      post:
         tags:
            - Manutenção da administração
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     type: object
                     properties:
                        userId:
                           type: integer
                           format: int64
                        path:
                           type: string
                        group:
                           type: string
                        method:
                           type: string
                           enum: ["GET", "POST", "PUT", "DELETE", "ALL", "PATCH"]
         responses:
            "201":
               description: "Created successfully"
   /maintenances/{id}/:
      delete:
         tags:
            - Manutenção da administração
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: id
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
         responses:
            "200":
               description: "Deleted successfully"
   /adds:
      get:
         tags:
            - Anúncios
         security:
            - bearerAuth: ["authentication"]
         responses:
            "200":
               description: Return all adds
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           adds:
                              type: array
                              items:
                                 $ref: "#/components/schemas/add"
      post:
         tags:
            - Anúncios
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               multipart/form-data:
                  schema:
                     type: object
                     properties:
                        url:
                           type: string
                        image:
                           type: string
                           format: binary
                           description: File to upload
         responses:
            "200":
               description: Return the created add
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/add"
   /adds/{id}/:
      delete:
         tags:
            - Anúncios
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: id
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
         responses:
            "200":
               description: "Deleted successfully"
   /events:
      get:
         tags:
            - Eventos
         security:
            - bearerAuth: ["authentication"]
         responses:
            "200":
               description: Return all events
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           events:
                              type: array
                              items:
                                 $ref: "#/components/schemas/event"
      post:
         tags:
            - Eventos
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               multipart/form-data:
                  schema:
                     type: object
                     properties:
                        name:
                           type: string
                        description:
                           type: string
                        title:
                           type: string
                        location:
                           type: string
         responses:
            "200":
               description: Return the created event
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/event"
   /events/{id}/:
      delete:
         tags:
            - Eventos
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: id
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
         responses:
            "200":
               description: "Deleted successfully"
   /games:
      get:
         tags:
            - Jogos
         security:
            - bearerAuth: ["authentication"]
         responses:
            "200":
               description: Return all games
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           games:
                              type: array
                              items:
                                 $ref: "#/components/schemas/game"
      post:
         tags:
            - Jogos
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     type: object
                     properties:
                        name:
                           type: string
                        eventId:
                           type: integer
                           format: int64
                        status:
                           type: string
                           enum: ["pendent", "open", "closed"]
                        location:
                           type: string
                        modality:
                           type: string
                        startDate:
                           type: string
                           format: date-time
         responses:
            "200":
               description: Return the created game
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/game"
      put:
         tags:
            - Jogos
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     type: object
                     required:
                        - gameId
                        - name
                        - eventId
                        - status
                        - location
                        - modality
                        - startDate
                     properties:
                        gameId:
                           type: integer
                           format: int64
                        name:
                           type: string
                        eventId:
                           type: integer
                           format: int64
                        status:
                           type: string
                           enum: ["pendent", "open", "closed"]
                        location:
                           type: string
                        modality:
                           type: string
                        startDate:
                           type: string
                           format: date-time
                        winnerOddId:
                           type: integer
                           format: int64
                        result:
                           type: string
         responses:
            "200":
               description: Return the updated game
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/game"
   /games/{id}/:
      get:
         tags:
            - Jogos
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: id
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
         responses:
            "200":
               description: Return the game
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/game"
      delete:
         tags:
            - Jogos
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: id
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
         responses:
            "200":
               description: "Deleted successfully"
   /odds:
      get:
         tags:
            - Odds
         security:
            - bearerAuth: ["authentication"]
         responses:
            "200":
               description: Return all odds
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           odds:
                              type: array
                              items:
                                 $ref: "#/components/schemas/odd"
      post:
         tags:
            - Odds
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     type: object
                     properties:
                        gameId:
                           type: integer
                           format: int64
                        teamId:
                           type: integer
                           format: int64
                        name:
                           type: string
                        payout:
                           type: number
                           format: double
                        maxBetAmount:
                           type: number
                           format: double
                        score:
                           type: integer
                           format: int
                        status:
                           type: string
                           enum: ["open", "lock"]
         responses:
            "200":
               description: Return the created odd
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/odd"
      put:
         tags:
            - Odds
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     type: object
                     required:
                        - oddId
                        - gameId
                        - teamId
                        - name
                        - payout
                        - maxBetAmount
                        - score
                        - offer
                     properties:
                        oddId:
                           type: integer
                           format: int64
                        gameId:
                           type: integer
                           format: int64
                        teamId:
                           type: integer
                           format: int64
                        name:
                           type: string
                        payout:
                           type: number
                           format: double
                        maxBetAmount:
                           type: number
                           format: double
                        score:
                           type: integer
                           format: int
                        offer:
                           type: boolean
                        status:
                           type: string
                           enum: ["open", "lock"]
         responses:
            "200":
               description: Return the updated odd
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/odd"
   /odds/{id}/:
      get:
         tags:
            - Odds
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: id
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
         responses:
            "200":
               description: Return the odd
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/odd"
      delete:
         tags:
            - Odds
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: id
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
         responses:
            "200":
               description: "Deleted successfully"
   /bets:
      get:
         tags:
            - Apostas
         security:
            - bearerAuth: ["authentication"]
         responses:
            "200":
               description: Return all bets
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           bets:
                              type: array
                              items:
                                 $ref: "#/components/schemas/bet"
      post:
         tags:
            - Apostas
         security:
            - bearerAuth: ["authentication"]
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     type: object
                     properties:
                        oddId:
                           type: integer
                           format: int64
                        amount:
                           type: number
                           format: double
         responses:
            "200":
               description: Return the created bet
               content:
                  application/json:
                     schema:
                        $ref: "#/components/schemas/bet"
   /bets/me:
      get:
         tags:
            - Apostas
         security:
            - bearerAuth: ["authentication"]
         responses:
            "200":
               description: Return all users bets
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           bets:
                              type: array
                              items:
                                 $ref: "#/components/schemas/bet"
   /bets/{id}/:
      delete:
         tags:
            - Apostas
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: id
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
         responses:
            "200":
               description: "Deleted successfully"
   /bets/game/{id}/:
      get:
         tags:
            - Apostas
         security:
            - bearerAuth: ["authentication"]
         parameters:
            - name: id
              in: path
              required: true
              schema:
                 type: integer
                 format: int64
         responses:
            "200":
               description: Return all bets of a game
               content:
                  application/json:
                     schema:
                        type: object
                        properties:
                           bets:
                              type: array
                              items:
                                 $ref: "#/components/schemas/bet"
